// Code generated by go-bindata.
// sources:
// data/instructions.md
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataInstructionsMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x41\x6f\xda\x4c\x10\x3d\xe3\x5f\xf1\xe4\x1c\x02\x08\xc2\x9d\xef\x14\x7d\x44\x09\x07\xbe\x2f\x12\xa4\x55\x4e\xf1\xda\x1e\xe3\x6d\xec\x5d\x6b\x77\x0d\xa5\x55\xff\x7b\x67\xd7\x76\x4a\x68\xd5\x53\x22\x05\xbc\xe3\x99\x37\xb3\x6f\xde\xe3\x0a\x4f\x56\xec\x29\x8a\xae\xae\x70\x4f\x8a\x8c\xa8\x38\xc2\x67\x60\x8a\xfb\xbb\x1d\x92\x45\x82\x47\x23\x95\xc3\x5a\x59\x67\xda\xcc\x49\xad\x2c\xc6\xae\x94\x16\x0d\x97\x4e\xce\x52\x9d\x30\x7b\x72\x8b\xe5\xde\xe8\xb6\x59\xaf\x86\x4a\x57\x12\xb2\xd6\x18\xf2\xcf\x21\x05\x85\x36\x21\xbc\x97\x07\x52\x08\xf9\x58\xaf\xfe\x81\x50\xd0\x8d\x6f\xc1\x73\x24\xb9\x70\x94\x70\x13\x23\x6a\x72\x64\x50\x8b\x13\x52\xe2\x80\xb5\x94\xc3\x69\x18\xb2\xba\x3a\x50\x40\xb2\x59\x49\x79\x5b\x51\x0f\x2d\x1c\x7c\x39\x24\x4f\x4d\x22\x87\x2e\xa0\xf4\xf1\xa6\xbb\xa8\x6f\x67\xa3\xe8\x16\x49\xe8\x9c\xa0\x14\x36\x80\x70\x89\x40\x77\xcd\xd6\xd0\x32\x4a\x92\xe4\x8b\xd5\x2a\x1a\x8d\x46\xdf\xfd\xc7\x28\x96\x79\xbc\x44\xbc\x5e\x79\xc0\x50\x1c\xcf\xba\x17\x8a\x87\xf4\xaf\xfc\xf7\xa2\x12\x29\x55\xbf\xa5\x38\x59\xd3\x37\xad\x42\xda\x8e\x9f\xe1\x0f\x33\x9f\xe6\x7b\xf3\xdc\x35\x9e\xb6\x8b\x3b\xc1\x13\x1b\xe6\xc1\xe0\xb6\x26\x23\x33\xb1\xf8\x8f\x8e\x78\xd6\xe6\xb5\x03\xfa\xe1\xc7\xea\x36\x34\x9d\x32\xf1\xd3\x29\x53\x1f\x1a\xfd\x91\xf9\x8e\x5c\x99\x33\xfb\xb2\x90\x4c\x5c\x7a\x42\x9f\xd6\x63\x3c\xfe\xbf\x3d\x03\x49\x70\x9b\xe7\x10\x5d\x4e\x47\xd8\xba\x6e\xb4\x71\x51\xb4\x2b\xc9\x10\x04\xff\xbb\xa3\x86\x3b\x35\x64\xfd\xf4\xff\x6e\x3f\x41\x86\x94\x25\x10\xe7\xe2\x64\x63\x5e\x64\xee\x1f\x1d\xd9\xf8\xe6\x2d\xd8\x25\x59\x06\xcf\xa9\x10\x6d\xe5\xde\xb6\x36\x43\x2a\x78\xa9\x91\x56\x61\xe6\xc6\xe8\x03\x4f\x9c\x63\xef\x35\x29\x33\xf8\xfa\x81\xa8\x23\xd1\x6b\x87\xe9\xd1\xdf\x40\x07\x28\x1b\x14\x60\x1b\xca\xf8\xba\x59\x50\x81\xe5\xf4\x75\x28\x36\x14\xd1\x57\x69\xc3\x0c\x03\xc0\x3b\xe5\x08\x75\xea\x45\xe9\xb7\x35\x83\x74\x60\xa1\xb7\x5e\x70\x52\xf1\x5c\x54\x30\x86\xca\xc8\xcb\xcf\x0f\xd3\xdf\x6c\xc0\xb8\xf1\xaa\xba\x88\x79\x00\x11\x48\x2a\x24\x9f\x8e\xd2\x95\xac\x45\x3e\x50\x95\xa3\x64\x71\x92\xb1\x81\xaf\x4c\x57\x6d\xad\xec\xb9\x20\x82\x04\x79\x4d\x88\xef\x7b\x8f\xc4\xb3\x78\xc5\x3e\xe8\x73\x3e\x33\x17\x1c\xd9\xb2\xad\x1c\x82\xa6\xc6\x0f\x0f\xcb\xcd\x66\x12\x82\xba\xb9\x8c\xed\x3a\xfb\x35\x25\x2b\x0f\xaa\xad\x53\x32\x71\x68\xf1\x32\xbe\x40\x45\xc6\x5e\x64\xb7\x71\xe2\x1c\xc1\x52\x86\x68\x5e\x91\xf3\x4e\x14\x69\x6a\xe8\x20\x45\xf7\x63\xd0\x7b\xb9\x68\xab\x2a\x2c\x87\xaf\x0f\x6f\x83\x25\xae\x37\xd7\x33\xfe\xd0\xaa\xff\xe2\x37\xd7\x93\x97\x9e\xa3\xf7\xe4\x7f\x3c\x49\xec\xfe\xf1\x33\xff\xcd\x37\x9b\xf9\x6a\x35\xf9\x10\x9a\x2e\x1d\x13\xc6\x5f\x74\x12\x5c\xf8\xb5\x0f\xee\x09\x82\x1d\x0f\xf2\xf5\xac\x54\xa7\xc9\x99\x4c\xfe\x8e\xc3\xd4\xfc\x02\xe2\x03\xc6\xef\xf5\x7c\x8e\xf4\x33\x00\x00\xff\xff\x10\xcd\x47\x41\xc3\x05\x00\x00")

func dataInstructionsMdBytes() ([]byte, error) {
	return bindataRead(
		_dataInstructionsMd,
		"data/instructions.md",
	)
}

func dataInstructionsMd() (*asset, error) {
	bytes, err := dataInstructionsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/instructions.md", size: 1475, mode: os.FileMode(420), modTime: time.Unix(1453609271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/instructions.md": dataInstructionsMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"instructions.md": &bintree{dataInstructionsMd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

